// <auto-generated />
using System;
using ConfigureServices;
using ConfigureServices.Models.Fields;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConfigureServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901075448_AddProducts")]
    partial class AddProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfigureServices.Domain.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ConfigureServices.Models.ComplexModels.ComplexModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_complexmodels");

                    b.ToTable("complexmodels", (string)null);
                });

            modelBuilder.Entity("ConfigureServices.Models.ComplexModels.SimpleModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("attributeid");

                    b.Property<long?>("ComplexModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("complexmodelid");

                    b.Property<BaseField>("Field")
                        .HasColumnType("jsonb")
                        .HasColumnName("field");

                    b.HasKey("Id")
                        .HasName("pk_simplemodel");

                    b.HasIndex("ComplexModelId")
                        .HasDatabaseName("ix_simplemodel_complexmodelid");

                    b.ToTable("simplemodel", (string)null);
                });

            modelBuilder.Entity("ConfigureServices.Models.ComplexModels.SimpleModel", b =>
                {
                    b.HasOne("ConfigureServices.Models.ComplexModels.ComplexModel", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("ComplexModelId")
                        .HasConstraintName("fk_simplemodel_complexmodels_complexmodelid");
                });

            modelBuilder.Entity("ConfigureServices.Models.ComplexModels.ComplexModel", b =>
                {
                    b.Navigation("AttributeValues");
                });
#pragma warning restore 612, 618
        }
    }
}
